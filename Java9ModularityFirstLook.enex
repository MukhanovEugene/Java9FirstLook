<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd">
<en-export export-date="20171214T203040Z" application="Evernote" version="Evernote Mac 6.13.1 (455786)">
<note><title>Java 9 modularity: First look.</title><content><![CDATA[<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>Module system is one of the biggest changes to Java ever.</div><div>HTTP/2 Client, updates to Stream APIs, Collection Factories are additional features.</div><div><br /></div><ol><li>Creating modules</li><li>Working with Modules</li><li>Services in a Modular world</li><li>The All-new Linking Phase</li><li>Getting your code ready for Java 9</li></ol><div><br /></div><div>What is modularity and why it is so important?</div><div><br /></div><div>Content:</div><div>The modular JDK</div><div>Java Module system concepts</div><div>The example: Introducing easy text</div><div>Build the example</div><div><br /></div><div>Benefits:</div><div>Strong encapsulation</div><div>Well-defined interfaces</div><div>Explicit dependencies</div><div><br /></div><div>Old system:</div><div>One huge library - rt.jar</div><div>Many entangled classes</div><div>Restricted by backwards compatibility</div><div><br /></div><div>New system:</div><div>- Explicit dependecies</div><div>- Every one module has implicit dependency on java.base module</div><div><br /></div><div><b>3 tenents of modularity</b>:</div><div>- explicit dependencies (A module lists what it needs from other modules)</div><div>- strong encapsulation (Hide your internals, be strict about what is public API)</div><div>- well defined interfaces (When modules interact, use stable and well-defined interfaces)</div><div><br /></div><div>A module has:</div><div>1 - public interfaces section. It means every modules depending on this module will be able to use all public interfaces in this module.</div><div>2 - names of internal packages. Strong encapsulation in modular system.</div><div><br /></div><div><br /></div><div>Module defines by module descriptor.</div><div>Declarations should be in the file module-info.java :</div><div>module &lt;name &gt; {</div><div>     <b>exports</b> java.lang;     // exports - uses package name</div><div>     <b>exports</b> java.utils [<b>to</b> &lt;module name&gt;];</div><div>     ...</div><div>     <b>requires</b> [<b style="font-family:gotham, helvetica, arial, sans-serif;font-size:14px;">transitive</b>|<b style="font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;">public</b>|<b style="font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;">mandated</b>] java.logging; // dependencies - takes module name</div><div>     <b>requires</b> java.xml;</div><div>     ...</div><div>     <b>conceals</b> com.sun.javafx.charts;</div><div>     ...</div><div>     <b>uses</b> com.api.MyService;</div><div>     ...</div><div>     <b>provides</b> com.api.MyService <b>with</b> myProvider.MyServiceImpl; //<i> <b>without export !!!!!</b></i></div><div>}</div><div><br /></div><div>Module resolution process.</div><div>- Checks module path for correctness</div><div>- During compile &amp; run-time</div><div>- For application and platform modules</div><div>- Rejects multiple versions of the same module</div><div>- Multiple root modules possible</div><div><br /></div><div>For testing, questions flow:</div><div>- Can we read the module</div><div>- Do you have require statement</div><div>- Is the package exported</div><div>- Is the type public</div><div><br /></div><div><br /></div><div>Readability relation is not transitive by default.</div><div><br /></div><div>Implied Readability</div><div>requires <b>transitive</b> &lt;module name&gt;;</div><div><span style="font-family:gotham, helvetica, arial, sans-serif;font-size:14px;">requires </span><b style="font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;">public</b><span style="font-family:gotham, helvetica, arial, sans-serif;font-size:14px;"> &lt;module name&gt;;</span></div><div><span style="font-family:gotham, helvetica, arial, sans-serif;font-size:14px;">requires </span><b style="font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;">mandated</b><span style="font-family:gotham, helvetica, arial, sans-serif;font-size:14px;"> &lt;module name&gt;;</span></div><div><br /></div><div>Introducing services</div><div>1) Service provider (it provides)</div><div>2) Service catalog/registry</div><div>3) Service consumer (it uses)</div><div><br /></div><div>What's wrong  with regular code?</div><div>It depends on implementation, not an interface</div><div>Implementation class needs to be exported</div><div>Tight coupling from front-ends to analysis module</div><div>Not extensible</div><div><br /></div><div><br /></div><div>Linking.</div><div><br /></div><div>Tool - jlink</div><div>Usually two fases: compillation and executing.</div><div>Linking is completely optional.</div><div><br /></div><div>The main goal is to create - Custom runtime image.</div><div>It will be smaller</div><div>perfomance </div><div><br /></div><div>jlink --module-path jars/:$JAVA_HOME/jmods --add-modules easytext.cli,easytext.analysis.coleman,easytext.analysis.kincaid --strip-debug --compress=2 --output image --launcher launch=easytext.cli/javamodularity.easytext.cli.Main</div><div><br /></div><div><br /></div><div>Preparing for Java 9.</div><div><br /></div><div>javac --add-exports java.base/sun.security.x509=ALL-UNNAMED Main.java</div><div><span style="font-family:gotham, helvetica, arial, sans-serif;font-size:14px;">java --add-exports java.base/sun.security.x509=ALL-UNNAMED Main</span></div><div><br /></div><div>Be default in an old fashion application that is using classpath only java.se module is available.</div><div>All the other modules you should add explicitly.</div><div><br /></div><div>1 Add all non-modular JAR to module path (into a folder)</div><div>2 Name derived from JAR filename</div><div>3 These JAR will export all packages</div><div><br /></div><div>module application {</div><div>     requires commons.lang; // for commons-langX-X.X.jar</div><div>}</div><div><br /></div><div>javac --module-path lib --module-source-path ......</div><div>java --module-path lib:out -m application/.......</div><div><br /></div><div><br /></div></en-note>]]></content><created>20171209T001145Z</created><updated>20171213T232259Z</updated><note-attributes><author>eim226</author><reminder-order>0</reminder-order></note-attributes></note>
</en-export>
